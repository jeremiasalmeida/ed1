a) Definir o registro de conta corrente regCCorrente e declarar a variável tipo ponteiro arvCCorrente (que apontará para a raiz da árvore).
b) Fazer uma função (chamada leCCorrente) capaz de realizar a leitura dos dados, a partir do teclado, de uma conta corrente a ser cadastrada, retornando um ponteiro para o registro de conta corrente lido (nó). Parâmetros da função: nenhum.
c) Construir uma função (chamada obtemCCorrente) que seja capaz de retornar um ponteiro para um registro de conta corrente (nó) a partir do seu número de conta corrente. Caso o registro (nó) não exista, retornar NULL. Parâmetros: número da conta corrente e ponteiro para raiz da árvore.
d) Desenvolver uma função (chamada proximaCCorrente) que seja capaz de encontrar o próximo número de conta corrente disponível para cadastro de um novo correntista. Deve retornar o próximo número encontrado, ou –1 caso não exista mais contas. Se algum número de conta já foi excluído, deve ser reaproveitado para a abertura de uma nova conta corrente. Parâmetro: ponteiro para raiz da árvore.
e) Construir um procedimento (chamado incluiCCorrente) capaz de incluir uma nova conta corrente. Para isto utilizar a função do item d) para encontrar o número da próxima conta corrente e a função de leitura do item b). Caso não haja nenhuma posição livre exibir a mensagem “Impossível cadastrar mais clientes”. Parâmetro: ponteiro para raiz da árvore.
f) Fazer um procedimento (chamado alteraCCorrente) que, fornecida uma conta corrente válida, possa alterar os seguintes dados de uma conta corrente: Nome, Depósito Inicial, Tipo da Conta e Senha. Permitir ao usuário selecionar o item a ser alterado e realizar a operação. Parâmetros: número da conta corrente e ponteiro para raiz da árvore.
g) Construir um procedimento (chamado depositoCCorrente) capaz de realizar um depósito. Parâmetros: número da conta corrente; ponteiro para raiz da árvore e valor do depósito.
h) Desenvolver uma função (chamada saqueCCorrente) capaz de realizar um saque na conta corrente. Se o valor exceder o saldo atual e a conta corrente é comum, retornar Falso (indicando saque não efetuado) e não realizar o saque. Se a conta corrente for especial e o saldo, após o saque, for inferior a R$ -1.500,00, retornar Falso (0) e não efetivar o saque, caso contrário, efetivar o saque e retornar Verdadeiro (1). Parâmetros: número da conta corrente; ponteiro para raiz da árvore e valor do saque.
i) Desenvolver uma função (chamada saldoAtualCCorrente) que retorne o saldo atual para uma determinada conta corrente. Parâmetros: número da conta corrente e ponteiro para raiz da árvore.
j) Construir um procedimento (chamado consultaUltimaMovimentacao) que consulta e mostra os dados da última movimentação da conta corrente seguindo o formato apresentado a seguir. Parâmetros: número da conta corrente e ponteiro para raiz da árvore.
k) Fazer um procedimento (chamado transfereValor) que realiza a transferência entre contas correntes. Nesta função, observe que podem ser utilizadas as funções de saque e o procedimento de depósito desenvolvidos nos itens h) e g). Parâmetros: números das contas correntes de origem e destino; valor da transferência e ponteiro para raiz da árvore.
l) Fazer um procedimento (chamado excluiCCorrente) que seja capaz de excluir uma conta corrente. A exclusão é realizada removendo-se o nó que possui o número da conta. Parâmetros: número da conta corrente e ponteiro para raiz da árvore.
m) Construir um programa que seja capaz de gerenciar o BANCO utilizando as funções e procedimentos desenvolvidos nos itens anteriores. Sabe-se que:
- inicialmente o usuário deve informar o número da conta corrente;
- o programa é finalizado quando o número da conta corrente fornecido for igual a –1;
- conta corrente 0 significa funcionário do banco habilitando todas as funções do projeto.
A senha para o funcionário, inicialmente, é 12345. Um correntista do banco fornece um número de conta corrente válido/ senha correta o que disponibiliza as operações v), vi), vii), viii) e ix), definidas no início do projeto;